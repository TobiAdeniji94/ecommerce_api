basePath: /api/v1
definitions:
  models.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  models.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.OrderItemInput:
    properties:
      product_id:
        type: string
      quantity:
        minimum: 1
        type: integer
    required:
    - product_id
    - quantity
    type: object
  models.PlaceOrderInput:
    properties:
      items:
        items:
          $ref: '#/definitions/models.OrderItemInput'
        type: array
    required:
    - items
    type: object
  models.ProductInput:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - name
    - price
    - stock
    type: object
  models.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  models.UpdateOrderStatusInput:
    properties:
      status:
        type: string
    required:
    - status
    type: object
  models.UserInput:
    properties:
      email:
        type: string
      password:
        type: string
      role:
        type: string
    required:
    - email
    - password
    type: object
  models.ValidationError:
    properties:
      field:
        type: string
      message:
        type: string
    type: object
  models.ValidationErrorResponse:
    properties:
      errors:
        items:
          $ref: '#/definitions/models.ValidationError'
        type: array
    type: object
host: localhost:3000
info:
  contact: {}
  description: E-commerce API for managing orders and products.
  title: E-Commerce API
  version: "1.0"
paths:
  /orders:
    get:
      description: Retrieve a list of all orders placed by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of orders
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to fetch orders
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all orders for a user
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: Allows an authenticated user to place an order with one or more
        products
      parameters:
      - description: Order payload
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.PlaceOrderInput'
      produces:
      - application/json
      responses:
        "200":
          description: Order created successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid order payload
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to create order
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Place a new order
      tags:
      - Orders
  /orders/{id}/cancel:
    put:
      description: Allows an authenticated user to cancel an order if it is in "Pending"
        status
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Order canceled successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid order ID or status
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to cancel order
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Cancel an order
      tags:
      - Orders
  /orders/{id}/status:
    put:
      description: Allows an admin to update the status of an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Update order status payload
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOrderStatusInput'
      responses:
        "200":
          description: Order status updated successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid order ID or payload
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to update order status
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update order status
      tags:
      - Orders
  /products:
    get:
      description: Retrieves a list of all products available in the store
      produces:
      - application/json
      responses:
        "200":
          description: Product(s) retrieved successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "500":
          description: Failed to retrieve products
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Allows an admin user to add a new product
      parameters:
      - description: Product payload
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.ProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: Product created successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid product payload
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "500":
          description: Failed to create product
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Products
  /products/{id}:
    delete:
      description: Allows an admin user to delete a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Product deleted successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to delete product
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - Products
    get:
      description: Retrieves a single product by its ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Product retrieved successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid product ID
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to retrieve product
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get product by ID
      tags:
      - Products
    put:
      description: Allows an admin user to update an existing product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated product payload
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.ProductInput'
      responses:
        "200":
          description: Product updated successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Invalid product ID or payload
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to update product
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a product
      tags:
      - Products
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password, returning a JWT token
      parameters:
      - description: User login payload
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Validation errors
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Failed to generate token
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Authenticate a user
      tags:
      - Users
  /users/register:
    post:
      consumes:
      - application/json
      description: Create a new user in the system with email, password, and optional
        role
      parameters:
      - description: User registration payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.SuccessResponse'
        "400":
          description: Validation errors
          schema:
            $ref: '#/definitions/models.ValidationErrorResponse'
        "500":
          description: Failed to create user
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a new user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: Use "Bearer {your token}" to authorize
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
